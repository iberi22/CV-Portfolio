---
import type { ProfessionalExperience } from "@/env.d.ts"

interface Props {
  experience: ProfessionalExperience[]
}

const { experience } = Astro.props as Props

function calculateDuration(startDate: string, endDate: string): string {
  const start = new Date(startDate)
  // If end date is 'Present', use the current date
  const end =
    endDate.toLowerCase() === "present" ? new Date() : new Date(endDate)
  let years = end.getFullYear() - start.getFullYear()
  let months = end.getMonth() - start.getMonth()

  if (months < 0) {
    years--
    months += 12
  }

  // Add 1 to month to make it inclusive
  months += 1
  if (months === 12) {
    months = 0
    years += 1
  }

  if (months === 0 && years === 0) return "< 1 month"

  let durationString = ""
  if (years > 0) {
    durationString += `${years} year${years > 1 ? "s" : ""}`
  }
  if (months > 0) {
    if (years > 0) durationString += ", "
    durationString += `${months} month${months > 1 ? "s" : ""}`
  }

  return durationString
}
---

<style>
    .experience-item {
        margin-bottom: 15px;
        padding-bottom: 15px;
        border-bottom: 1px solid var(--border-color);
    }
    .experience-item:last-child {
        border-bottom: none;
    }
    .experience-header {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        margin-bottom: 8px;
    }
    .company {
        font-weight: 600;
        font-size: 1.1rem;
    }
    .date-duration {
        text-align: right;
    }
    .date {
        color: var(--text-secondary);
        font-style: italic;
        display: block;
    }
    .duration {
        color: var(--text-secondary);
        font-size: 0.85rem;
    }
    .position {
        margin-bottom: 8px;
        color: var(--harvard-crimson);
        font-weight: 600;
    }
    .job-description {

    }
    .job-description li {
        margin-bottom: 8px;
        display: none; /* Hide by default */
    }
    .experience-item.show-all .job-description li {
        display: list-item; /* Show when toggled */
    }
    .show-more-link {
        color: var(--harvard-crimson);
        text-decoration: underline;
        cursor: pointer;
        font-size: 0.9rem;
        display: inline-block;
        margin-top: 10px;
    }
    .show-more-link:hover {
        color: var(--harvard-dark);
    }
</style>

<div class="section">
    <h2 class="section-title">Professional Experience</h2>
  <div class="space-y-8 p-5 summary-list">
    {experience.map(job => (
        <div class="experience-item" data-experience-item>
            <div class="experience-header">
                <div class="company" set:html={job.company}></div>
                <div class="date-duration">
                    <span class="date">{job.date}</span>
                    <span class="duration">({calculateDuration(job.start_date, job.end_date)})</span>
                </div>
            </div>
            <div class="position" set:html={job.position}></div>
            {job.description && job.description.length > 0 && (
                <>
                    <ul class="job-description summary-list list-disc mt-2 space-y-1">
                        {job.description.map((desc: string) => (
                            <li set:html={desc}></li>
                        ))}
                    </ul>
                    <a class="show-more-link" data-show-more-link>Show more</a>
                </>
            )}
        </div>
    ))}
  </div>
</div>

<script>
    document.querySelectorAll('[data-show-more-link]').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const item = link.closest('[data-experience-item]');
            if (item) {
                item.classList.toggle('show-all');
                link.textContent = item.classList.contains('show-all') ? 'Show less' : 'Show more';
            }
        });
    });
</script>
